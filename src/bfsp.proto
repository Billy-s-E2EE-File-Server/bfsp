syntax = "proto3";

package bfsp.files;

message EncryptedFileMetadata {
  bytes metadata = 1;
  bytes nonce = 2;
}

message FileServerMessage {
  message UploadChunk {
    ChunkMetadata chunk_metadata = 1;
    bytes chunk = 2;
  }

  message ChunksUploadedQuery { repeated bytes chunk_ids = 1; }

  message DownloadChunkQuery { bytes chunk_id = 1; }

  message DeleteChunksQuery { repeated bytes chunk_ids = 1; }

  message Authentication { string token = 1; }

  message UploadFileMetadata { EncryptedFileMetadata encrypted_file_metadata = 1; };

  message DownloadFileMetadataQuery { int64 id = 1; }

  message ListFileMetadataQuery { repeated int64 ids = 1; }

  Authentication auth = 1;

  oneof message {
    UploadChunk upload_chunk = 2;
    ChunksUploadedQuery chunks_uploaded_query = 3;
    DownloadChunkQuery download_chunk_query = 4;
    DeleteChunksQuery delete_chunks_query = 5;
    UploadFileMetadata upload_file_metadata = 6;
    DownloadFileMetadataQuery download_file_metadata_query = 7;
    ListFileMetadataQuery list_file_metadata_query = 8;
  }
}

message UploadChunkResp { optional string err = 1; }

message DownloadChunkResp {
  message ChunkData {
    ChunkMetadata chunk_metadata = 1;
    bytes chunk = 2;
  }

  oneof response {
    ChunkData chunk_data = 1;
    string err = 2;
  }
}

message ChunksUploadedQueryResp {
  message ChunkUploaded {
    bytes chunk_id = 1;
    bool uploaded = 2;
  }

  message ChunksUploaded { repeated ChunkUploaded chunks = 1; }

  oneof response {
    ChunksUploaded chunks = 1;
    string err = 2;
  }
}

message DeleteChunksResp { optional string err = 1; }

message UploadFileMetadataResp { optional string err = 1; };

message DownloadFileMetadataResp {
  oneof response {
    EncryptedFileMetadata encrypted_file_metadata = 1;
    string err = 2;
  }
};

message ListFileMetadataResp {
  message FileMetadatas { map<int64, EncryptedFileMetadata> metadatas = 1; }

  oneof response {
    FileMetadatas metadatas = 1;
    string err = 2;
  }
};

message ChunkMetadata {
  bytes id = 1;
  bytes hash = 2;
  uint32 size = 3;
  int64 indice = 4;
  bytes nonce = 5;
}
